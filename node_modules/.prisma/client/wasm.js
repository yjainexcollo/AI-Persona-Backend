
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  passwordHash: 'passwordHash',
  status: 'status',
  emailVerified: 'emailVerified',
  verifiedAt: 'verifiedAt',
  failedLoginCount: 'failedLoginCount',
  lockedUntil: 'lockedUntil',
  lastLoginAt: 'lastLoginAt',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  workspaceId: 'workspaceId',
  avatarUrl: 'avatarUrl',
  timezone: 'timezone',
  locale: 'locale'
};

exports.Prisma.WorkspaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  domain: 'domain',
  isActive: 'isActive',
  maxMembers: 'maxMembers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  timezone: 'timezone',
  locale: 'locale',
  status: 'status'
};

exports.Prisma.WorkspaceDeletionScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  requestedBy: 'requestedBy',
  reason: 'reason',
  purgeAfter: 'purgeAfter',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  deviceId: 'deviceId'
};

exports.Prisma.EmailVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  used: 'used',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AuditEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  eventData: 'eventData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  traceId: 'traceId',
  createdAt: 'createdAt'
};

exports.Prisma.PersonaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  personalName: 'personalName',
  personaRole: 'personaRole',
  about: 'about',
  traits: 'traits',
  painPoints: 'painPoints',
  coreExpertise: 'coreExpertise',
  communicationStyle: 'communicationStyle',
  keyResponsibility: 'keyResponsibility',
  description: 'description',
  avatarUrl: 'avatarUrl',
  webhookUrl: 'webhookUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonaFavouriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  personaId: 'personaId',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  personaId: 'personaId',
  title: 'title',
  visibility: 'visibility',
  archivedAt: 'archivedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  personaId: 'personaId',
  userId: 'userId',
  fileId: 'fileId',
  content: 'content',
  role: 'role',
  edited: 'edited',
  deleted: 'deleted',
  createdAt: 'createdAt',
  chatSessionId: 'chatSessionId'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  personaId: 'personaId',
  userId: 'userId',
  sessionId: 'sessionId',
  status: 'status',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  lastActivityAt: 'lastActivityAt',
  metadata: 'metadata',
  errorMessage: 'errorMessage'
};

exports.Prisma.MessageEditScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  oldContent: 'oldContent',
  editedAt: 'editedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  filename: 'filename',
  mimeType: 'mimeType',
  sizeBytes: 'sizeBytes',
  url: 'url',
  uploadedAt: 'uploadedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.SharedLinkScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserStatus = exports.$Enums.UserStatus = {
  PENDING_VERIFY: 'PENDING_VERIFY',
  ACTIVE: 'ACTIVE',
  DEACTIVATED: 'DEACTIVATED',
  PENDING_DELETION: 'PENDING_DELETION'
};

exports.MemberRole = exports.$Enums.MemberRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.WorkspaceStatus = exports.$Enums.WorkspaceStatus = {
  ACTIVE: 'ACTIVE',
  PENDING_DELETION: 'PENDING_DELETION',
  DELETED: 'DELETED'
};

exports.AuditEventType = exports.$Enums.AuditEventType = {
  REGISTER: 'REGISTER',
  VERIFY_EMAIL: 'VERIFY_EMAIL',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGIN_FAILED: 'LOGIN_FAILED',
  LOGOUT: 'LOGOUT',
  REFRESH_TOKEN: 'REFRESH_TOKEN',
  REQUEST_PASSWORD_RESET: 'REQUEST_PASSWORD_RESET',
  RESET_PASSWORD: 'RESET_PASSWORD',
  CHANGE_PASSWORD: 'CHANGE_PASSWORD',
  DEACTIVATE_ACCOUNT: 'DEACTIVATE_ACCOUNT',
  REACTIVATE_ACCOUNT: 'REACTIVATE_ACCOUNT',
  ROLE_CHANGED: 'ROLE_CHANGED',
  SESSION_REVOKED: 'SESSION_REVOKED',
  ACCOUNT_LOCKED: 'ACCOUNT_LOCKED',
  ACCOUNT_UNLOCKED: 'ACCOUNT_UNLOCKED',
  PROFILE_UPDATED: 'PROFILE_UPDATED',
  AVATAR_UPLOADED: 'AVATAR_UPLOADED',
  WORKSPACE_UPDATED: 'WORKSPACE_UPDATED',
  MEMBER_ROLE_CHANGED: 'MEMBER_ROLE_CHANGED',
  MEMBER_REMOVED: 'MEMBER_REMOVED',
  WORKSPACE_DELETION_REQUESTED: 'WORKSPACE_DELETION_REQUESTED',
  PERSONA_FAVOURITED: 'PERSONA_FAVOURITED',
  PERSONA_UNFAVOURITED: 'PERSONA_UNFAVOURITED',
  CHAT_MESSAGE_SENT: 'CHAT_MESSAGE_SENT',
  WEBHOOK_FAILED: 'WEBHOOK_FAILED',
  WEBHOOK_SUCCESS: 'WEBHOOK_SUCCESS',
  CONVERSATION_VISIBILITY_CHANGED: 'CONVERSATION_VISIBILITY_CHANGED',
  CONVERSATION_ARCHIVED: 'CONVERSATION_ARCHIVED',
  CONVERSATION_TITLE_UPDATED: 'CONVERSATION_TITLE_UPDATED',
  MESSAGE_EDITED: 'MESSAGE_EDITED',
  FILE_UPLOADED: 'FILE_UPLOADED',
  REACTION_ADDED: 'REACTION_ADDED',
  SHARED_LINK_CREATED: 'SHARED_LINK_CREATED',
  SHARED_LINK_ACCESSED: 'SHARED_LINK_ACCESSED'
};

exports.ConversationVisibility = exports.$Enums.ConversationVisibility = {
  PRIVATE: 'PRIVATE',
  SHARED: 'SHARED'
};

exports.MessageRole = exports.$Enums.MessageRole = {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT'
};

exports.ChatSessionStatus = exports.$Enums.ChatSessionStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  TIMEOUT: 'TIMEOUT',
  CANCELLED: 'CANCELLED'
};

exports.ReactionType = exports.$Enums.ReactionType = {
  LIKE: 'LIKE',
  DISLIKE: 'DISLIKE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Workspace: 'Workspace',
  WorkspaceDeletion: 'WorkspaceDeletion',
  Session: 'Session',
  EmailVerification: 'EmailVerification',
  PasswordResetToken: 'PasswordResetToken',
  AuditEvent: 'AuditEvent',
  Persona: 'Persona',
  PersonaFavourite: 'PersonaFavourite',
  Conversation: 'Conversation',
  Message: 'Message',
  ChatSession: 'ChatSession',
  MessageEdit: 'MessageEdit',
  File: 'File',
  Reaction: 'Reaction',
  SharedLink: 'SharedLink'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
