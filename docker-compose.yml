version: "3.8"

services:
  db:
    image: postgres:15
    container_name: aipersona_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aipersona
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - aipersona_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d aipersona"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: aipersona_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aipersona_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aipersona_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/aipersona
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      APP_BASE_URL: ${APP_BASE_URL:-http://localhost:3000}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aipersona_net
    command: >
      sh -c "
        npx prisma generate &&
        npx prisma migrate deploy &&
        node src/index.js
      "

volumes:
  db_data:
  redis_data:

networks:
  aipersona_net:
    driver: bridge
